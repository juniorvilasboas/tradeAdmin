// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  isActive      String    @default("1") @db.Char(1)
  accounts      Account[]
  sessions      Session[]
  Broker        Broker[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Brokers {
  id      String   @id @default(cuid())
  name    String
  logo    String
  acting  String
  ranking Int
  Broker  Broker[]
}

model Broker {
  id             String  @id @default(cuid())
  account        Int
  initialCapital Float
  currentCapital Float?
  userId         String
  user           User    @relation(fields: [userId], references: [id])
  brokersId      String
  brokers        Brokers @relation(fields: [brokersId], references: [id])
  Conta          Conta[]
}

model Conta {
  id             String  @id @default(cuid())
  currentCapital Float?
  brokerId       String
  broker         Broker  @relation(fields: [brokerId], references: [id])
  Trade          Trade[]
}

model Trade {
  id      String   @id @default(cuid())
  gains   Int
  loss    Int
  date    DateTime
  contaId String
  conta   Conta    @relation(fields: [contaId], references: [id])
}
